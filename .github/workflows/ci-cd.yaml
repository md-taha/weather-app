# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main
#   push:
#     branches:
#       - main

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: 16
#       - name: Install dependencies
#         run: npm install
#       - name: Fix permissions
#         run: chmod +x ./node_modules/.bin/jest  
#       - name: Run tests
#         run: npm test

#   build-and-deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 1: Set up Docker environment
#       - name: Log in to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build Docker image
#         run: |
#           docker build -t taha2606/weather-app:latest .

#       - name: Push Docker image to DockerHub
#         run: |
#           docker push taha2606/weather-app:latest

#       # Step 2: Set up AWS CLI and configure credentials for EKS
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1

#       # Step 3: Update kubeconfig for EKS
#       - name: Update kubeconfig for EKS
#         run: |
#           aws eks --region ap-south-1 update-kubeconfig --name weather-app-cluster

#       # Step 4: Deploy to EKS (Kubernetes)
#       - name: Deploy to EKS
#         run: |
#           kubectl apply -f k8s/deployment.yaml
#           kubectl apply -f k8s/service.yaml
#           kubectl rollout status deployment/weather-app # Wait for deployment to complete

#       # Step 5: Check deployment status
#       - name: Check deployment status
#         run: |
#           kubectl get pods
#           kubectl get svc

#       # Step 6: Notify deployment status
#       - name: Notify Deployment Status
#         run: |
#           if [[ $(kubectl get deployment weather-app -o jsonpath='{.status.availableReplicas}') -gt 0 ]]; then
#             echo "Deployment successful"
#           else
#             echo "Deployment failed"
#             exit 1
#           fi

#       # Step 7: Get the Load Balancer URL (if using LoadBalancer type service)
#       - name: Get Load Balancer URL
#         run: |
#           EXTERNAL_IP=$(kubectl get svc weather-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
#           echo "Service is available at http://$EXTERNAL_IP"



name: CI/CD Pipeline for Minikube

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
      - name: Install dependencies
        run: npm install
      - name: Fix permissions
        run: chmod +x ./node_modules/.bin/jest  
      - name: Run tests
        run: npm test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 1: Set up Docker environment
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t taha2606/weather-app:latest .

      - name: Push Docker image to DockerHub
        run: |
          docker push taha2606/weather-app:latest

      # Step 2: Set up Minikube environment
      - name: Set up Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/
          minikube start --driver=docker --cpus=2 --memory=4096

      - name: Set up kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Point kubectl to Minikube
        run: |
          kubectl config use-context minikube

      # Step 3: Deploy to Minikube (Kubernetes)
      - name: Deploy to Minikube
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/weather-app # Wait for deployment to complete

      # Step 4: Check deployment status
      - name: Check deployment status
        run: |
          kubectl get pods
          kubectl get svc

      # Step 5: Expose Minikube service
      - name: Expose Minikube service
        run: |
          minikube service weather-app-service-1 --url
